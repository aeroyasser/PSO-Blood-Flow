%--------------------------------------------------------------------------
%                THE PARTICLE SWARM OPTIMIZATION
%                               PSO
%--------------------------------------------------------------------------
%                     Aorta+systemic Compartement
%                          6-Elements 
%                           -------------
%                            Constant R1
%---------------------------------------------------------------------
% Copyright: These codes can be used with author premission.
% Author:  Yasser Aboelkassem
% Department of Mechanical Engineering
% San Diego State University
% Year: November/2020
%------------------------------------
%--------------------------------------------------------------------------
clc; close all; clear all;
tic;
%--------------------------------------------------------------------
% Get The 6-Elements Parameters from Virag Optimization Code
%--------------------------------------------------------------------
global Eta_o Co C1 R1 Rp L1 t_Qav_Exp Qav_Exp Tp
%-----------------------------------------------------
% Load Exp data: (Exp1,Book, Kass,segers1, segers2)
% Load Opitimized paramters generated by Virag code
%-----------------------------------------------------
%-----------------------------------------------------
% Load Exp data: Aortic Pressure and Flow rate  
%-----------------------------------------------------
%  1 = Nichols Book Adolescent 
%  2 = Nichols Book Middle
%  3 = Nichols Book Elder
%-----------------
%  4 = Milnor
%  5 = Kass
%-----------------
%  6 = Segers_Pig
%  7 = Segeres_Dog
%-----------------
%  8 = Nichols-28
%  9 = Nichol-52
% 10 = Nichols-68
%-------------------
% 11 = Normotensive
% 12 = Mild-Hyper
% 13 = Sever_Hyper
%-----------------------------------
Flag=13;       
if (Flag==1)
array1=dlmread('QAV_Nicols_Adolescent.POD');
array2=dlmread('PAV_Nicols_Adolescent.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nicols_Adolescent.DAT');
elseif (Flag==2)
array1=dlmread('QAV_Nichols_Middle.DAT');
array2=dlmread('PAV_Nichols_Middle.DAT');  
Virag_param=dlmread('Optm_Parm_WK6_Nichols_Middle.DAT');
elseif (Flag==3)
array1=dlmread('QAV_Nichols_Elderly.DAT');
array2=dlmread('PAV_Nichols_Elderly.DAT');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_Elderly.DAT');
elseif (Flag==4)
array1=dlmread('QAV_Milnor.DAT');
array2=dlmread('PAV_Milnor.DAT');
Virag_param=dlmread('Optm_Parm_WK6_Milnor.DAT');
elseif (Flag==5)
array1=dlmread('QAV_Kass.POD');
array2=dlmread('PAV_Kass.POD');
Virag_param=dlmread('Optm_Parm_WK6_Kass.DAT');
elseif (Flag==6)
array1=dlmread('QAV_Segers_Pig.POD');
array2=dlmread('PAV_Segers_Pig.POD');
Virag_param=dlmread('Optm_Parm_WK6_Segers_Pig.DAT');
elseif (Flag==7)
array1=dlmread('QAV_Segers_Dog.POD');
array2=dlmread('PAV_Segers_Dog.POD');
Virag_param=dlmread('Optm_Parm_ConstR_Segers_Dog.DAT');
elseif (Flag==8)  %---- [New Nichols 28]----
array1=dlmread('QAV_Nichols_28.POD');
array2=dlmread('PAV_Nichols_28.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_28.DAT');
elseif (Flag==9)  %---- [New Nichols 52]----
array1=dlmread('QAV_Nichols_52.POD');
array2=dlmread('PAV_Nichols_52.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_52.DAT');
elseif (Flag==10) %---- [New Nichols 68]----
array1=dlmread('QAV_Nichols_68_corr.POD');
array2=dlmread('PAV_Nichols_68_corr.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_68_corr.DAT');
elseif (Flag==11) %---- [Normal-Hyper]---------
array1=dlmread('QAV_Nichols_Normotensive.POD');
array2=dlmread('PAV_Nichols_Normotensive.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_Normotensive.DAT');
elseif (Flag==12) %---- [Mild-Hyper]-----------------
array1=dlmread('QAV_Nichols_Mild_Hypertension.POD');
array2=dlmread('PAV_Nichols_Mild_Hypertension.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_Mild_Hypertension.DAT');
elseif (Flag==13) %---- [Sever-Hyper]-----------------
array1=dlmread('QAV_Nichols_Severe_Hypertension.POD');
array2=dlmread('PAV_Nichols_Severe_Hypertension.POD');
Virag_param=dlmread('Optm_Parm_WK6_Nichols_Severe_Hypertension.DAT');
end

%---- Measured Time and Qav----
t_Qav_Exp=array1(:,1);   % measured time with Qav
Qav_Exp=smooth(array1(:,2)); % it is assumed that Qav is in ml/s
%---- Measured Time and Pav----
t_Pa_Exp=(array2(1:1:end-1,1));   % measured time with Qav
Pa_Exp=smooth(array2(1:1:end-1,2));
Tp=t_Pa_Exp(end)-t_Pa_Exp(1);  % Cycle length

%----------------------------------------------------

% figure()
% plot(t_Pa_Exp,Pa_Exp,'--o')
% legend('Pa-Exp')
% 
% figure()
% plot(t_Qav_Exp,Qav_Exp,'--o')
% legend('Qav-Exp')
%-----------------------------------------------------
%          Windkessel parameters
%     Calculated from Virag Optimization Code
%---------------------------------------------------
Eta_o = Virag_param(1);%0.2063;            %[mmHg s/ml]
Co    = Virag_param(2);%0.6899;            %[ml/mmHg]
L1    = Virag_param(3);%0.0026;            %[mmHg s^2 /ml]
R1    = Virag_param(4);%0.0523;            %[mmHg s /ml]
C1    = Virag_param(5);%0.6436;            %[ml/mmHg]
Rp    = Virag_param(6);%1.0632;            %[mmHg s /ml] Systemic Resistance  
%-------------------------------
%Initial Conditions
%---------------------------
Pa=80;    % aortic pressure    [mmHg]  
Ps=50;    % systemic pressure in compasrtment #2 in th 9-element model [mmHg]
Qa=0;     % [ml/s]
Qav=0;    
G=Co*(Pa-Eta_o*(Qav-Qa));  % from eq 3, we lumped all derivatives together dG/dt = Qav-Qa, G=(Co*Pa-Eta_o*Co*(Gav-Ga))
%-------------------------
y0=[Qa;G;Ps];
%-----------------------------------
% ODEs Solver and updating initials for next period
%-----------------------------------

RelTol = 1.e-4;
AbsTol = 1.e-6;
MaxStep =1.e-4;
%options = odeset('RelTol',RelTol,'AbsTol',AbsTol,'MaxStep',MaxStep);
options = odeset('RelTol',RelTol,'AbsTol',AbsTol);
Ncycle=30;
for N=1:Ncycle  % Number of cycles
    [Time,Y]=ode45(@Func_6Elem_ConstR,[0  Tp],y0,options);
     Qa=Y(:,1); 
     G =Y(:,2);
     Ps=Y(:,3);
     y0=[Qa(end);G(end);Ps(end)];
end
%----------
% plotting 
%----------
Qa=Y(:,1);
G=Y(:,2);
%-----------
%find pa
%-----------
Qav=interp1(t_Qav_Exp,Qav_Exp,Time);             % Get Qav from Exp. Data function 
Pa=G./Co+ Eta_o.*(Qav-Qa);
Pa_Num_at_exp_pts=interp1(Time,Pa,t_Pa_Exp);    % Get Pa at the exact location of the Exp. Data function 
Pa_Error=Pa_Exp-Pa_Num_at_exp_pts;
Residual=sqrt(sum(Pa_Error.*Pa_Error)/length(Pa_Exp));
%-----------------------
% figure()
% plot(Time,Pa,'k', t_Pa_Exp,Pa_Exp,'--o', t_Pa_Exp,Pa_Num_at_exp_pts,'*')
% legend('Pa-Num', 'Pa-Exp')
% %---------
% figure(3)
% QR=Ps./Rp;
% Qeta=Qav-Qa;
% plot(Time,Qav,'k',Time,Qa,'k',Time,Qeta,'k',Time,QR,'k')
% legend('Qav','Qa','Qeta','QR')


%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%
%                   Particle Swarm Optimization
%                            PSO Code 
%
%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
Np = 40;          % number of particles
Max_Iter = 60;    % max number of iterations

%----------------------------
% Parameters to be optimized
%----------------------------
%-----------------------------------------------------
%          Windkessel parameters
%     Calculated from Virag Optimization Code
%       Initial guess for the PSO code
%                 OR
%     Use any other values within the same range
%---------------------------------------------------
Eta_o_lower = 0.7*Eta_o; 
Eta_o_upper = 1.3*Eta_o; 
Co_lower    = 0.7*Co; 
Co_upper    = 1.3*Co;
C1_lower    = 0.7*C1; 
C1_upper    = 1.3*C1;
L1_lower    = 0.7*L1; 
L1_upper    = 1.3*L1;
R1_lower    = 0.7*R1; 
R1_upper    = 1.3*R1;
Rp_lower    = 0.7*Rp; 
Rp_upper    = 1.3*Rp;
%-------------------------
%---------------------------------
% particle initial positions
%--------------------------------
X_Eta_o_PSO     = Eta_o_lower +(Eta_o_upper-Eta_o_lower).*rand(1,Np);
X_Co_PSO        = Co_lower    +(Co_upper-Co_lower).*rand(1,Np);
X_C1_PSO        = C1_lower    +(C1_upper-C1_lower).*rand(1,Np);
X_L1_PSO        = L1_lower    +(L1_upper-L1_lower).*rand(1,Np);
X_R1_PSO        = R1_lower    +(R1_upper-R1_lower).*rand(1,Np);
X_Rp_PSO        = Rp_lower    +(Rp_upper-Rp_lower).*rand(1,Np);
%---------------------
% particle initial velocities
%---------------------
V_Eta_o_PSO   = 0.25.*(Eta_o_upper-Eta_o_lower).*rand(1,Np);
V_Co_PSO      = 0.25.*(Co_upper-Co_lower).*rand(1,Np);
V_C1_PSO      = 0.25.*(C1_upper-C1_lower).*rand(1,Np);
V_L1_PSO      = 0.25.*(L1_upper-L1_lower).*rand(1,Np);
V_R1_PSO      = 0.25.*(R1_upper-R1_lower).*rand(1,Np);
V_Rp_PSO      = 0.25.*(Rp_upper-Rp_lower).*rand(1,Np);

%----------------
% Find Residual
%----------------
residual_cost_func = zeros(1,Np);
for i=1:Np
    Eta_o = X_Eta_o_PSO(i);
    Co    = X_Co_PSO(i);
    C1    = X_C1_PSO(i);
    L1    = X_L1_PSO(i);
    R1    = X_R1_PSO(i);
    Rp    = X_Rp_PSO(i);
    %----------------------------------------------------
    % ODE Solver within the PSO
    %-----------------------------
    for N=1:Ncycle  % Number of cycles
        [Time,Y]=ode15s(@Func_6Elem_ConstR,[0  Tp],y0,options);
        Qa=Y(:,1); 
        G =Y(:,2);
        Ps=Y(:,3);
        y0=[Qa(end);G(end);Ps(end)];
    end
    %------------------------------------------------
    %Find pa using the solution from the ODE solver
    %----------------------------------------------
    Qa=Y(:,1);
    G=Y(:,2);
    Ps=Y(:,3);
    Qav=interp1(t_Qav_Exp,Qav_Exp,Time);                           % Get Qav from Exp. Data function 
    Pa=G./Co+ Eta_o.*(Qav-Qa);
    Pa_Num_at_exp_pts=interp1(Time,Pa,t_Pa_Exp);                   % Get Pa at the exact location of the Exp. Data function 
    Pa_Error=Pa_Exp-Pa_Num_at_exp_pts;                             % Error calculated at the same points
    residual_cost_func(i)=sqrt(sum(Pa_Error.^2)/length(Pa_Exp));   % cost function for PSO 
    %----------------------------------------------------------------------------
end

%------------------------------------------
% Find Min of Residual (i.e., global best)
%------------------------------------------
 Res_gbest = residual_cost_func (1);
 i_Res_gbest = 1;
 for i = 1:Np
       if (residual_cost_func (i) < Res_gbest)
            Res_gbest    = residual_cost_func (i);
            i_Res_gbest  = i;
       end
 end
%--------------------

%--------------------------------------------------------
% obtain the parameters that give global (gbest)
%--------------------------------------------------------
Eta_o_gbest = X_Eta_o_PSO(i_Res_gbest);
Co_gbest    = X_Co_PSO(i_Res_gbest);
C1_gbest    = X_C1_PSO(i_Res_gbest);
L1_gbest    = X_L1_PSO(i_Res_gbest);
R1_gbest    = X_R1_PSO(i_Res_gbest);
Rp_gbest    = X_Rp_PSO(i_Res_gbest);


%---------------------------------------------------------------------------------------
% obtain the parameters that give personal best (pbest)
% Note: this can be combined with one of the other loop but keep it like that for now
%----------------------------------------------------------------------------------------
Eta_o_pbest = zeros(1,Np);
Co_pbest    = zeros(1,Np);
C1_pbest    = zeros(1,Np);
L1_pbest    = zeros(1,Np);
R1_pbest    = zeros(1,Np);
Rp_pbest    = zeros(1,Np);


for i = 1:Np
   
    Eta_o_pbest(i) = X_Eta_o_PSO(i);
    Co_pbest(i)    = X_Co_PSO(i);
    C1_pbest(i)    = X_C1_PSO(i);
    L1_pbest(i)    = X_L1_PSO(i);
    R1_pbest(i)    = X_R1_PSO(i);
    Rp_pbest(i)    = X_Rp_PSO(i);
          
    Res_pbest(i) = residual_cost_func (i);  %  Residual personal best
end

%---------------------------------------------------------------------------------
% 
%                                 Iterations
%                 Swarm Iteration Step over all particles
%
% 
%------------------- --------------------------------------------------------------

w_max = 1.0;
w_min = 0.3;
dw = (w_max-w_min)/Max_Iter;
const1 = 1.05;
const2 = 1.05;
Res = zeros(1,Max_Iter);
for it = 1: Max_Iter  %begin swarm iteration
    w = w_min +it*dw;
    for i = 1:Np % begin loop over all particles
        %---------------
        %Velocity update
        %-----------------
        V_Eta_o_PSO(i) = w * V_Eta_o_PSO(i) + const1 * rand * (Eta_o_pbest(i)   -  X_Eta_o_PSO(i)) + const2 * rand * (Eta_o_gbest -  X_Eta_o_PSO(i)) ;
        V_Co_PSO(i)    = w * V_Co_PSO(i)    + const1 * rand * (Co_pbest(i)      -  X_Co_PSO(i))    + const2 * rand * (Co_gbest    -  X_Co_PSO(i)) ;
        V_C1_PSO(i)    = w * V_C1_PSO(i)    + const1 * rand * (C1_pbest(i)      -  X_C1_PSO(i))    + const2 * rand * (C1_gbest    -  X_C1_PSO(i)) ;
        V_L1_PSO(i)    = w * V_L1_PSO(i)    + const1 * rand * (L1_pbest(i)      -  X_L1_PSO(i))    + const2 * rand * (L1_gbest    -  X_L1_PSO(i)) ;
        V_R1_PSO(i)    = w * V_R1_PSO(i)    + const1 * rand * (R1_pbest(i)      -  X_R1_PSO(i))    + const2 * rand * (R1_gbest    -  X_R1_PSO(i)) ;
        V_Rp_PSO(i)    = w * V_Rp_PSO(i)    + const1 * rand * (Rp_pbest(i)      -  X_Rp_PSO(i))    + const2 * rand * (Rp_gbest    -  X_Rp_PSO(i)) ;

        %-----------------
        % position update
        %-----------------
        %if(it>1)
        X_Eta_o_PSO(i) = X_Eta_o_PSO(i) + V_Eta_o_PSO(i);
        X_Co_PSO(i) = X_Co_PSO(i) + V_Co_PSO(i);
        X_C1_PSO(i) = X_C1_PSO(i) + V_C1_PSO(i);
        X_L1_PSO(i) = X_L1_PSO(i) + V_L1_PSO(i);
        X_R1_PSO(i) = X_R1_PSO(i) + V_R1_PSO(i);
        X_Rp_PSO(i) = X_Rp_PSO(i) + V_Rp_PSO(i);
        %end
        %---------------------------
        % model parameter update
        %---------------------------
        Eta_o = X_Eta_o_PSO(i) ;
        Co    = X_Co_PSO(i) ;
        C1    = X_C1_PSO(i) ;
        L1    = X_L1_PSO(i) ;
        R1    = X_R1_PSO(i);
        Rp    = X_Rp_PSO(i);
        %-----------------------------------------------------
        % residual update using the new particles/parameters
        %----------------------------------------------------
        %----------------------------------------------------
        % ODE Solver within the PSO
        %-----------------------------
        for N=1:Ncycle  % Number of cycles
            [Time,Y]=ode15s(@Func_6Elem_ConstR,[0  Tp],y0,options);
            Qa=Y(:,1); 
            G =Y(:,2);
            Ps=Y(:,3);
            y0=[Qa(end);G(end);Ps(end)];
        end
        %------------------------------------------------
        %Find pa using the solution from the ODE solver
        %----------------------------------------------
        Qa=Y(:,1);
        G=Y(:,2);
        Ps=Y(:,3);
        Qav=interp1(t_Qav_Exp,Qav_Exp,Time);                               % Get Qav from Exp. Data function 
        Pa=G./Co+ Eta_o.*(Qav-Qa);
        Pa_Num_at_exp_pts=interp1(Time,Pa,t_Pa_Exp);                      % Get Pa at the exact location of the Exp. Data function 
        Pa_Error=Pa_Exp-Pa_Num_at_exp_pts;                             % Error calculated at the same points
        residual_cost_func(i)=sqrt(sum(Pa_Error.^2)/length(Pa_Exp));   % cost function for PSO 
        %----------------------------------------------------------------------
    end % finish looping over all particles to have new Residual vector

    %-------------------------------------------------
    % Find New Min of Residual (i.e., new global best)
    %--------------------------------------------------
    min_Res = residual_cost_func (1);
    i_min_Res = 1;
    for i=1:Np
         if (residual_cost_func (i) < min_Res)
             min_Res    = residual_cost_func (i);
             i_min_Res  = i;
         end
    end
    %-------------------------------
    % Check for update min residual
    %-------------------------------
    if (min_Res <= Res_gbest)
        Res_gbest = min_Res;
    %-------------------------------------------------
    % obtain the parameters that give global (gbest)
    %--------------------------------------------------
    Eta_o_gbest = X_Eta_o_PSO(i_min_Res) ;
    Co_gbest    = X_Co_PSO(i_min_Res);  
    C1_gbest    = X_C1_PSO(i_min_Res) ;
    L1_gbest    = X_L1_PSO(i_min_Res);  
    R1_gbest    = X_R1_PSO(i_min_Res);
    Rp_gbest    = X_Rp_PSO(i_min_Res);
     
    end

    for i=1:Np
        if(residual_cost_func (i) <= Res_pbest(i) )
        Eta_o_pbest(i)   = X_Eta_o_PSO(i) ;
        Co_pbest(i)    = X_Co_PSO(i); 
        C1_pbest(i)    = X_C1_PSO(i) ;
        L1_pbest(i)    = X_L1_PSO(i);      
        R1_pbest(i)    = X_R1_PSO(i);
        Rp_pbest(i)    = X_Rp_PSO(i);
        %--------
        Res_pbest(i) = residual_cost_func (i);
        end
     end
    Res(it) = Res_gbest;
 
 end % finish swarm iteration

%------------------------------------------------------------
% Calculate the final solution using the optimized parameters
%------------------------------------------------------------
%------------------------------------
% Now we can use the optimized param
%------------------------------------
Eta_o   = Eta_o_gbest ;
Co      = Co_gbest ;
C1      = C1_gbest ;
L1      = L1_gbest ;
R1      = R1_gbest;   
Rp      = Rp_gbest;    
 
%----------------------------------------------------
% Get the final Sol using The optimized parameters
%----------------------------------------------------

for N=1:Ncycle  % Number of cycles
    [Time,Y]=ode15s(@Func_6Elem_ConstR,[0  Tp],y0,options);
    Qa=Y(:,1); 
    G =Y(:,2);
    Ps=Y(:,3);
    y0=[Qa(end);G(end);Ps(end)];
end
%------------------------------------------------
% Find the final pa using the solution from the ODE solver
%----------------------------------------------
   Qa=Y(:,1);
   G=Y(:,2);
   Ps=Y(:,3);
   Qav=interp1(t_Qav_Exp,Qav_Exp,Time);                               % Get Qav from Exp. Data function 
   Pa=G./Co+ Eta_o.*(Qav-Qa);
   Pa_Num_at_exp_pts=interp1(Time,Pa,t_Pa_Exp);                      % Get Pa at the exact location of the Exp. Data function 

%------------------------------------------------------
% Print out the PSO optimized model parameters values
%------------------------------------------------------
fprintf('Eta_o = %d \n',Eta_o);
fprintf('Co = %d \n',Co);
fprintf('C1 = %d \n',C1);
fprintf('L1 = %d \n',L1);
fprintf('R1 = %d \n',R1);
fprintf('Rp = %d \n',Rp);
fprintf('RMS (mmHg) = %d \n',Res(end));
%-----------------------
% Plot Final Solution
%-----------------------
figure(2)
plot(Time,Pa,'k', t_Pa_Exp,Pa_Exp,'--o', t_Pa_Exp,Pa_Num_at_exp_pts,'*')
legend('Pa-Num', 'Pa-Exp')
%---------
% figure(3)
% QR=Ps./Rp;
% Qeta=Qav-Qa;
% plot(Time,Qav,'k',Time,Qa,'k',Time,Qeta,'k',Time,QR,'k')
% legend('Qav','Qa','Qeta','QR')

toc